apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.tencent.vasdolly'
apply plugin: 'com.alibaba.arouter'
apply plugin:  'kotlin-parcelize'

android {
  compileSdkVersion libs.versions.compilesdk.get().toInteger()
  buildToolsVersion libs.versions.buildtools.get()

  compileOptions {
    // Flag to enable support for the new language APIs
//    coreLibraryDesugaringEnabled true
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }

  defaultConfig {
    applicationId "com.lyy.keepassa"
    minSdkVersion libs.versions.minSdk.get().toInteger()
    targetSdkVersion libs.versions.targetsdk.get().toInteger()
    versionCode 55
    versionName KPA_VERSION_NAME
    multiDexEnabled true

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    // so 版本
    ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'

    // 只保留以下语言包
    resConfigs "zh-rCN", "zh-rTW", "en", "fr-rCA", "nb-rNO", "ru-rRU", "fr", "de-rDE", "pl", "tr",
        "uk-rUA", "es"
  }

  signingConfigs {
    release {
      def properties = new Properties()
      def inputStream = project.rootProject.file('local.properties').newDataInputStream()
      properties.load(inputStream)

      storeFile file(properties.getProperty('storeFile'))
      storePassword properties.getProperty('storePassword')
      keyAlias properties.getProperty('keyAlias')
      keyPassword properties.getProperty('keyPassword')
      v1SigningEnabled true // v1 签名
      v2SigningEnabled true // v2 签名
    }
  }

  buildTypes {

    debug {
      debuggable = true
      // 下面两个是debug-db的参数
      resValue("string", "PORT_NUMBER", "10086") // 端口
      resValue("string", "DB_PASSWORD_keepassA.db", "stVz7QxFgzA7yMnH") // sqlcipher 加密密码
      signingConfig signingConfigs.release
    }

    release {
      //zipAlignEnabled true //开启Zipalign优化
      debuggable false
      minifyEnabled true
      shrinkResources true // 移除无用资源
      //      multiDexKeepFile file('multidex-config.txt')
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
      // wcdb 需要增加这个混淆
      signingConfig signingConfigs.release
    }
  }

  buildFeatures {
    dataBinding = true
    // for view binding :
    viewBinding = true
  }

  testOptions {
    unitTests.includeAndroidResources = true
    unitTests.returnDefaultValues = true
  }

  externalNativeBuild {
    cmake {
      path "src/main/jni/CMakeLists.txt"
    }
  }

  lintOptions {
    checkReleaseBuilds false
    // Or, if you prefer, you can continue to check for errors in release builds,
    // but continue the build even when errors are found:
    //    abortOnError false
  }

  flavorDimensions "app"
  //   渠道配置 https://developer.android.google.cn/studio/build/build-variants.html?hl=zh-cn
  productFlavors {
    dev {
      dimension "app"
    }
    //      fdroid{
    //        dimension "app"
    //      }
  }

  configurations{
//    implementation.exclude group: 'com.intellij' , module:'annotations'
  }

}

kapt {
  arguments {
    arg('room.schemaLocation', "$projectDir/schemas") //指定room.schemaLocation生成的文件路径，用于版本升级
    arg('AROUTER_MODULE_NAME', project.getName() + "_kpa") // arouter
    // 生成的文档路径 : build/generated/source/apt/(debug or release)/com/alibaba/android/arouter/docs/arouter-map-of-${moduleName}.json
    //    arg('AROUTER_GENERATE_DOC', "enable") // arouter,release 不能打开这个
    // eventbus索引，https://greenrobot.org/eventbus/documentation/subscriber-index/
    arg('eventBusIndex', 'com.lyy.keepassa.KpaEventBusIndex') // 将会自动创建KpaEventBusIndex
  }
}

configurations {
  // 配置不同的渠道加载不同的module
  playImplementation {}
}

/**
 * 根据已有基础包重新生成多渠道包
 * 如果是自动生成渠道包，见https://github.com/Tencent/VasDolly
 */
rebuildChannel {
  //指定渠道文件
  channelFile = file("${project.getProjectDir()}/channel")
  //  baseDebugApk = 已有Debug APK
  // 已有Release APK
  //  baseReleaseApk = new File("${project.buildDir}/AndResGuardFinal.apk")
  baseApk = new File("${project.buildDir}/outputs/apk/dev/release/app-dev-release.apk")
  //默认为new File(project.buildDir, "rebuildChannel/debug")
  //  debugOutputDir = Debug渠道包输出目录
  //默认为new File(project.buildDir, "rebuildChannel/release")
  // Release渠道包输出目录
  outputDir = new File("${project.buildDir}/outputs/channels")
  //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
  fastMode = false
  //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
  lowMemory = false
}

// 配置 AndResGuard 于 channel 前执行
// 这几行代码表示reBuildChannel任务是依赖于resguardRelease任务的，也就是说先执行完资源混淆后再执行多渠道打包。
afterEvaluate {
  tasks.getByName('reBuildChannel') {
    dependsOn(assembleRelease) // 暂时使用这个

    // 不要使用，1.2.21打包出来的apk，消息对话框布局错乱
    //    dependsOn('resguardRelease')
  }
}

boolean isReleaseBuildType() {
  for (String s : gradle.startParameter.taskNames) {
    println("builtType: " + s)
    if (s.contains("Release") | s.contains("release") | s.contains("reBuildChannel")) {
      return true
    }
  }
  return false
}

// 替换AndroidManifest 参数
// https://developer.android.com/studio/known-issues#variant_api
android.applicationVariants.all { variant ->
  variant.outputs.all { output ->
    output.processManifest.doLast {
      // Stores the path to the maifest.
      String manifestPath = "${multiApkManifestOutputDirectory.asFile.get()}/AndroidManifest.xml"
      println("版本类型：" + isReleaseBuildType())
      //      def keyHash = "5qMkIKbIM5Lx7VbajX8mT3rKXpE="
      //      if (isReleaseBuildType()) {
      //        keyHash = "xv3czaACtp98KvuSqP3GRLCxjrc="
      //      }
      def keyHash = "xv3czaACtp98KvuSqP3GRLCxjrc="

      // 替换one drive 配置
      def updatedContent = file(manifestPath).getText('UTF-8')
          .replaceAll("msal_package_name", "com.lyy.keepassa") // 包名
          .replaceAll("msal_signature_hash", keyHash)
      // 当前签名hash
      file(manifestPath).write(updatedContent, 'UTF-8')
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  // 测试模块
  testImplementation libs.test.junit
  androidTestImplementation libs.bundles.android.test

  //      debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'
  // 数据库如果加密的话使用这个
  //  debugImplementation 'com.amitshekhar.android:debug-db-encrypt:1.0.6'

  // keepassA组件
  implementation 'me.laoyuyu.keepassa:KeepassIcon:0.4.0'
  implementation 'me.laoyuyu.keepassa:KeepassLib:0.4.1'
  //  implementation project(path: ':KpaLib')
  implementation 'me.laoyuyu.keepassa:KPAFrame:0.4.0'
  implementation 'me.laoyuyu.keepassa:UIWidget:0.4.0'


  // kotlin
  implementation(libs.bundles.android.kotlin)

  // =========================== android 组件 start =====================================
  implementation(libs.bundles.jetpack.ui) // jetpack-ui
  implementation(libs.bundles.jetpack.lifecycle) // lifecycle
  implementation(libs.jetpack.workmanager) // workmanager
  implementation(libs.jetpack.room.runtime) // room
  implementation(libs.jetpack.room.ktx) // room
  kapt(libs.jetpack.room.compiler)
  implementation(libs.google.tink)
  implementation(libs.jetpack.autofill) // 自动填充工具
  implementation(libs.jetpack.biometric) // 生物识别
  implementation(libs.jetpack.multidex)
  // =========================== android 组件 end =====================================

  // =========================== 三方库 start =====================================
  //  implementation libs.third
  implementation(libs.third.jodatime)
  implementation(libs.third.richtext) // 富文本
  implementation(libs.third.licensesdialog) //开源许可对话框
  implementation(libs.third.immersionbar) // 状态栏
  implementation(libs.third.subsampling) // 大图浏览
  implementation(libs.third.eventbus)
  kapt(libs.third.eventbus.compiler)
  implementation(libs.third.lottie) // json 动画库
  implementation(libs.third.glide)
  kapt(libs.third.glide.compiler)
  implementation(libs.third.dropbox)
  implementation(libs.third.webdav)
  implementation(libs.bundles.tencent.wcdb)
  implementation(libs.tencent.vasdolly)
  implementation(libs.third.protector) // XP/调试/多开/模拟器/root 判断
  implementation(libs.third.autosize)
  implementation(libs.bundles.tencent.bugly) // bugly
  implementation(libs.google.gson)
  implementation(libs.third.freereflection)
  implementation(libs.microsoft.msal)
  implementation(libs.squareup.retrofit)
  kapt(libs.ali.third.arouter.compiler)
  implementation(libs.third.zxing.embedded) { transitive = false }
  implementation(libs.google.zxing)
  implementation(libs.jetpack.palette.ktx)
//  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

  // mmkv
  implementation(libs.tencent.mmkv)

  // xlog
  implementation 'com.tencent.mars:mars-xlog:1.2.5'
  // // =========================== 三方库 end =====================================
  implementation(libs.google.gms.billing)
  implementation(libs.google.gms.base)
}

// 不要使用，1.2.21打包出来的apk，消息对话框布局错乱
//apply from: 'AndResGuard.gradle'
apply from: 'bugly.gradle'
